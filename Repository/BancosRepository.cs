using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Threading.Tasks;using drhipocratesCore.Config;using drhipocratesCore.Model;using MySql.Data;using MySql.Data.MySqlClient;namespace drhipocratesCore.Repository{   public class BancosRepository   {      String connect = Connect.getConnect;              public List<Bancos> List()         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idbancos, nomebanco, codigobanco from bancos");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             MySqlDataReader dr = null;             List<Bancos> lista = new List<Bancos>();                  try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Bancos unitario = new Bancos();                          unitario.idbancos = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.nomebanco = dr.IsDBNull(1) ? "" : dr.GetString(1);                     unitario.codigobanco = dr.IsDBNull(2) ? "" : dr.GetString(2);                          lista.Add(unitario);                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new List<Bancos>();             }             finally             { conn.Close(); }                  return lista;         }              public Bancos Get(int primary_key)         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idbancos, nomebanco, codigobanco from bancos where idbancos = @idbancos");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             comm.Parameters.Add("@idbancos", MySqlDbType.Int32);             comm.Parameters[0].Value = primary_key;             MySqlDataReader dr = null;             Bancos lista = new Bancos();             try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Bancos unitario = new Bancos();                          unitario.idbancos = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.nomebanco = dr.IsDBNull(1) ? "" : dr.GetString(1);                     unitario.codigobanco = dr.IsDBNull(2) ? "" : dr.GetString(2);                          lista = unitario;                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new Bancos();             }             finally             { conn.Close(); }                  return lista;         }    public int Post(Bancos bancos)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("insert into bancos (nomebanco, codigobanco) values (@nomebanco, @codigobanco)");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@nomebanco", MySqlDbType.VarChar );        comm.Parameters.Add("@codigobanco", MySqlDbType.VarChar );        comm.Parameters[0].Value = bancos.nomebanco;        comm.Parameters[1].Value = bancos.codigobanco;        Int32 id = 0;        try        {            conn.Open();            comm.ExecuteNonQuery();            query.Clear();            query.Append("Select @@Identity");            comm.CommandText = query.ToString();            var resultado = comm.ExecuteScalar();            id = Convert.ToInt32(resultado);        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }        return id;    }    public int Put(Bancos bancos)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("update bancos set idbancos = @idbancos, nomebanco = @nomebanco, codigobanco = @codigobanco where idbancos = @idbancos");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idbancos", MySqlDbType.Int32 );        comm.Parameters.Add("@nomebanco", MySqlDbType.VarChar );        comm.Parameters.Add("@codigobanco", MySqlDbType.VarChar );        comm.Parameters[0].Value = bancos.idbancos;        comm.Parameters[1].Value = bancos.nomebanco;        comm.Parameters[2].Value = bancos.codigobanco;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }    public int Delete(int idbancos)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("delete from bancos where idbancos = @idbancos");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idbancos", MySqlDbType.Int32 );        comm.Parameters[0].Value = idbancos;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }   }}