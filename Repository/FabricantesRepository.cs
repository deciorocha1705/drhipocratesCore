using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Threading.Tasks;using drhipocratesCore.Config;using drhipocratesCore.Model;using MySql.Data;using MySql.Data.MySqlClient;namespace drhipocratesCore.Repository{   public class FabricantesRepository   {      String connect = Connect.getConnect;              public List<Fabricantes> List()         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idfabricantes, nome from fabricantes");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             MySqlDataReader dr = null;             List<Fabricantes> lista = new List<Fabricantes>();                  try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Fabricantes unitario = new Fabricantes();                          unitario.idfabricantes = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.nome = dr.IsDBNull(1) ? "" : dr.GetString(1);                          lista.Add(unitario);                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new List<Fabricantes>();             }             finally             { conn.Close(); }                  return lista;         }              public Fabricantes Get(int primary_key)         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idfabricantes, nome from fabricantes where idfabricantes = @idfabricantes");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             comm.Parameters.Add("@idfabricantes", MySqlDbType.Int32);             comm.Parameters[0].Value = primary_key;             MySqlDataReader dr = null;             Fabricantes lista = new Fabricantes();             try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Fabricantes unitario = new Fabricantes();                          unitario.idfabricantes = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.nome = dr.IsDBNull(1) ? "" : dr.GetString(1);                          lista = unitario;                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new Fabricantes();             }             finally             { conn.Close(); }                  return lista;         }    public int Post(Fabricantes fabricantes)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("insert into fabricantes (nome) values (@nome)");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@nome", MySqlDbType.VarChar );        comm.Parameters[0].Value = fabricantes.nome;        Int32 id = 0;        try        {            conn.Open();            comm.ExecuteNonQuery();            query.Clear();            query.Append("Select @@Identity");            comm.CommandText = query.ToString();            var resultado = comm.ExecuteScalar();            id = Convert.ToInt32(resultado);        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }        return id;    }    public int Put(Fabricantes fabricantes)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("update fabricantes set idfabricantes = @idfabricantes, nome = @nome where idfabricantes = @idfabricantes");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idfabricantes", MySqlDbType.Int32 );        comm.Parameters.Add("@nome", MySqlDbType.VarChar );        comm.Parameters[0].Value = fabricantes.idfabricantes;        comm.Parameters[1].Value = fabricantes.nome;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }    public int Delete(int idfabricantes)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("delete from fabricantes where idfabricantes = @idfabricantes");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idfabricantes", MySqlDbType.Int32 );        comm.Parameters[0].Value = idfabricantes;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }   }}