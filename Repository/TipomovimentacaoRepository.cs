using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Threading.Tasks;using drhipocratesCore.Config;using drhipocratesCore.Model;using MySql.Data;using MySql.Data.MySqlClient;namespace drhipocratesCore.Repository{   public class TipomovimentacaoRepository   {      String connect = Connect.getConnect;              public List<Tipomovimentacao> List()         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idtipomovimentacao, nomemovimentacao from tipomovimentacao");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             MySqlDataReader dr = null;             List<Tipomovimentacao> lista = new List<Tipomovimentacao>();                  try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Tipomovimentacao unitario = new Tipomovimentacao();                          unitario.idtipomovimentacao = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.nomemovimentacao = dr.IsDBNull(1) ? "" : dr.GetString(1);                          lista.Add(unitario);                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new List<Tipomovimentacao>();             }             finally             { conn.Close(); }                  return lista;         }              public Tipomovimentacao Get(int primary_key)         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idtipomovimentacao, nomemovimentacao from tipomovimentacao where idtipomovimentacao = @idtipomovimentacao");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             comm.Parameters.Add("@idtipomovimentacao", MySqlDbType.Int32);             comm.Parameters[0].Value = primary_key;             MySqlDataReader dr = null;             Tipomovimentacao lista = new Tipomovimentacao();             try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Tipomovimentacao unitario = new Tipomovimentacao();                          unitario.idtipomovimentacao = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.nomemovimentacao = dr.IsDBNull(1) ? "" : dr.GetString(1);                          lista = unitario;                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new Tipomovimentacao();             }             finally             { conn.Close(); }                  return lista;         }    public int Post(Tipomovimentacao tipomovimentacao)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("insert into tipomovimentacao (nomemovimentacao) values (@nomemovimentacao)");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@nomemovimentacao", MySqlDbType.VarChar );        comm.Parameters[0].Value = tipomovimentacao.nomemovimentacao;        Int32 id = 0;        try        {            conn.Open();            comm.ExecuteNonQuery();            query.Clear();            query.Append("Select @@Identity");            comm.CommandText = query.ToString();            var resultado = comm.ExecuteScalar();            id = Convert.ToInt32(resultado);        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }        return id;    }    public int Put(Tipomovimentacao tipomovimentacao)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("update tipomovimentacao set idtipomovimentacao = @idtipomovimentacao, nomemovimentacao = @nomemovimentacao where idtipomovimentacao = @idtipomovimentacao");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idtipomovimentacao", MySqlDbType.Int32 );        comm.Parameters.Add("@nomemovimentacao", MySqlDbType.VarChar );        comm.Parameters[0].Value = tipomovimentacao.idtipomovimentacao;        comm.Parameters[1].Value = tipomovimentacao.nomemovimentacao;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }    public int Delete(int idtipomovimentacao)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("delete from tipomovimentacao where idtipomovimentacao = @idtipomovimentacao");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idtipomovimentacao", MySqlDbType.Int32 );        comm.Parameters[0].Value = idtipomovimentacao;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }   }}