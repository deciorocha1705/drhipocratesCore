using System;using System.Collections.Generic;using System.Data;using System.Linq;using System.Threading.Tasks;using drhipocratesCore.Config;using drhipocratesCore.Model;using MySql.Data;using MySql.Data.MySqlClient;namespace drhipocratesCore.Repository{   public class ConfiguracoesRepository   {      String connect = Connect.getConnect;              public List<Configuracoes> List()         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idconfiguracoes, valoradesao, valorativacaomensal from configuracoes");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             MySqlDataReader dr = null;             List<Configuracoes> lista = new List<Configuracoes>();                  try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Configuracoes unitario = new Configuracoes();                          unitario.idconfiguracoes = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.valoradesao = dr.IsDBNull(1) ? 0 : dr.GetFloat(1);                     unitario.valorativacaomensal = dr.IsDBNull(2) ? 0 : dr.GetFloat(2);                          lista.Add(unitario);                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new List<Configuracoes>();             }             finally             { conn.Close(); }                  return lista;         }              public Configuracoes Get(int primary_key)         {             MySqlConnection conn = new MySqlConnection(connect);             System.Text.StringBuilder query = new System.Text.StringBuilder();             query.Append("select idconfiguracoes, valoradesao, valorativacaomensal from configuracoes where idconfiguracoes = @idconfiguracoes");                  MySqlCommand comm = new MySqlCommand(query.ToString(), conn);             comm.Parameters.Add("@idconfiguracoes", MySqlDbType.Int32);             comm.Parameters[0].Value = primary_key;             MySqlDataReader dr = null;             Configuracoes lista = new Configuracoes();             try             {                 conn.Open();                 dr = comm.ExecuteReader(CommandBehavior.CloseConnection);                      while (dr.Read())                     {                     Configuracoes unitario = new Configuracoes();                          unitario.idconfiguracoes = dr.IsDBNull(0) ? 0 : dr.GetInt32(0);                     unitario.valoradesao = dr.IsDBNull(1) ? 0 : dr.GetFloat(1);                     unitario.valorativacaomensal = dr.IsDBNull(2) ? 0 : dr.GetFloat(2);                          lista = unitario;                     }             }             catch (Exception ex)             {                 string ERRO = ex.Message;                 return new Configuracoes();             }             finally             { conn.Close(); }                  return lista;         }    public int Post(Configuracoes configuracoes)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("insert into configuracoes (valoradesao, valorativacaomensal) values (@valoradesao, @valorativacaomensal)");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@valoradesao", MySqlDbType.Float );        comm.Parameters.Add("@valorativacaomensal", MySqlDbType.Float );        comm.Parameters[0].Value = configuracoes.valoradesao;        comm.Parameters[1].Value = configuracoes.valorativacaomensal;        Int32 id = 0;        try        {            conn.Open();            comm.ExecuteNonQuery();            query.Clear();            query.Append("Select @@Identity");            comm.CommandText = query.ToString();            var resultado = comm.ExecuteScalar();            id = Convert.ToInt32(resultado);        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }        return id;    }    public int Put(Configuracoes configuracoes)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("update configuracoes set idconfiguracoes = @idconfiguracoes, valoradesao = @valoradesao, valorativacaomensal = @valorativacaomensal where idconfiguracoes = @idconfiguracoes");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idconfiguracoes", MySqlDbType.Int32 );        comm.Parameters.Add("@valoradesao", MySqlDbType.Float );        comm.Parameters.Add("@valorativacaomensal", MySqlDbType.Float );        comm.Parameters[0].Value = configuracoes.idconfiguracoes;        comm.Parameters[1].Value = configuracoes.valoradesao;        comm.Parameters[2].Value = configuracoes.valorativacaomensal;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }    public int Delete(int idconfiguracoes)    {        MySqlConnection conn = new MySqlConnection(connect);        System.Text.StringBuilder query = new System.Text.StringBuilder();        query.Append("delete from configuracoes where idconfiguracoes = @idconfiguracoes");        MySqlCommand comm = new MySqlCommand(query.ToString(), conn);        comm.Parameters.Add("@idconfiguracoes", MySqlDbType.Int32 );        comm.Parameters[0].Value = idconfiguracoes;        try        {            conn.Open();            return comm.ExecuteNonQuery();        }        catch (Exception ex)        {            string ERRO = ex.Message;            return 0;        }        finally        { conn.Close(); }    }   }}